// <auto-generated />
using System;
using DelegateDI.Bug.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DelegateDI.Migrations
{
    [DbContext(typeof(ChatDbContext))]
    partial class ChatDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("chat")
                .HasAnnotation("ProductVersion", "7.0.2");

            modelBuilder.Entity("DelegateDI.Bug.Entities.AbstractChannel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUri")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AbstractChannel", "chat");

                    b.HasDiscriminator<string>("Discriminator").HasValue("AbstractChannel");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.ChannelPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("Permission")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ChannelPermission", "chat");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Flagged")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("TEXT");

                    b.Property<long>("TimeSentNodaTicks")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("ChatMessage", "chat");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ContactProfileId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("TEXT");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Contact", "chat");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.UserChannelConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("AbstractChannelId")
                        .HasColumnType("TEXT");

                    b.Property<int>("NotificationFrequency")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumberUnreadMessages")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AbstractChannelId");

                    b.HasIndex("PermissionsId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("UserChannelConfigurations", "chat");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsBylinesUser")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Permissions")
                        .HasColumnType("INTEGER");

                    b.Property<string>("WalletAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("WalletAddress", "ApplicationId")
                        .IsUnique();

                    b.ToTable("Profiles", "chat");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.Channel", b =>
                {
                    b.HasBaseType("DelegateDI.Bug.Entities.AbstractChannel");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("INTEGER");

                    b.HasDiscriminator().HasValue("Channel");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.ChatRoom", b =>
                {
                    b.HasBaseType("DelegateDI.Bug.Entities.AbstractChannel");

                    b.HasDiscriminator().HasValue("ChatRoom");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.BroadcastChannel", b =>
                {
                    b.HasBaseType("DelegateDI.Bug.Entities.Channel");

                    b.HasDiscriminator().HasValue("BroadcastChannel");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.CommunityChannel", b =>
                {
                    b.HasBaseType("DelegateDI.Bug.Entities.Channel");

                    b.HasDiscriminator().HasValue("CommunityChannel");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.ChatMessage", b =>
                {
                    b.HasOne("DelegateDI.Bug.Entities.AbstractChannel", "Channel")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.Contact", b =>
                {
                    b.HasOne("DelegateDI.Bug.Entities.UserProfile", "Owner")
                        .WithMany("Contacts")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.UserChannelConfiguration", b =>
                {
                    b.HasOne("DelegateDI.Bug.Entities.AbstractChannel", null)
                        .WithMany("Members")
                        .HasForeignKey("AbstractChannelId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("DelegateDI.Bug.Entities.ChannelPermission", "Permissions")
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DelegateDI.Bug.Entities.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permissions");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.AbstractChannel", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("DelegateDI.Bug.Entities.UserProfile", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
